<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>Live View</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://code.jquery.com/jquery-1.12.0.min.js"></script>
    <%= stylesheet_link_tag "videojs/video-js.min" %>
    <%= javascript_include_tag "live_view_private_widget" %>
    <style>
    .vjs-default-skin .vjs-play-control {
      height: 3em;
    }
    .vjs-default-skin .vjs-fullscreen-control {
      margin-right: 5px;
      height: 3em;
    }
    .vjs-default-skin .vjs-volume-control {
      margin-right: 10px;
    }
    .video-js {
      height: auto !important;
      width: auto !important;
      padding-top: 56.2%;
    }
    .video-js img{
      position: absolute;
      top: 0;
      height: 100%;
    }
    .video-js.vjs-fullscreen{
        padding-top: 0;
    }
  </style>
</head>
<body style="margin: 0px;">
<% if @unathorized %>
  <h1>Unauthorized</h1>
You are not allowed to view this camera
<% elsif @not_exist %>
  <p style="font-family: helvetica, arial">We are unable to fetch a live feed from this camera.<p>
<% else %>

<div>
  <% if params[:rtmp] %>
  <video id="camera-video-player" class="video-js vjs-default-skin"
         poster="<%= EVERCAM_MEDIA_API %>cameras/<%= params[:camera] %>/thumbnail?api_id=<%= current_user.api_id unless current_user.nil? %>&api_key=<%= current_user.api_key unless current_user.nil? %>"
         controls autoplay>
    <% if params[:hls] %>
    <source src="<%= params[:hls] %>" type="application/x-mpegURL">
    <% end %>
    <source src="<%= params[:rtmp] %>&requester=<%= params[:requester] %>" type="rtmp/flv">
  </video>
  <% else %>
  <img id="evercam-container-img"  style="width: 100%" src="<%= EVERCAM_MEDIA_API %>cameras/<%= params[:camera] %>/thumbnail?api_id=<%= current_user.api_id unless current_user.nil? %>&api_key=<%= current_user.api_key unless current_user.nil? %>" />
  <% end %>
</div>

<script>
  (function () {
    'use strict';

    var isCommonjs = typeof module !== 'undefined' && module.exports;
    var keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;

    var fn = (function () {
      var val;
      var valLength;

      var fnMap = [
        [
          'requestFullscreen',
          'exitFullscreen',
          'fullscreenElement',
          'fullscreenEnabled',
          'fullscreenchange',
          'fullscreenerror'
        ],
        // new WebKit
        [
          'webkitRequestFullscreen',
          'webkitExitFullscreen',
          'webkitFullscreenElement',
          'webkitFullscreenEnabled',
          'webkitfullscreenchange',
          'webkitfullscreenerror'

        ],
        // old WebKit (Safari 5.1)
        [
          'webkitRequestFullScreen',
          'webkitCancelFullScreen',
          'webkitCurrentFullScreenElement',
          'webkitCancelFullScreen',
          'webkitfullscreenchange',
          'webkitfullscreenerror'

        ],
        [
          'mozRequestFullScreen',
          'mozCancelFullScreen',
          'mozFullScreenElement',
          'mozFullScreenEnabled',
          'mozfullscreenchange',
          'mozfullscreenerror'
        ],
        [
          'msRequestFullscreen',
          'msExitFullscreen',
          'msFullscreenElement',
          'msFullscreenEnabled',
          'MSFullscreenChange',
          'MSFullscreenError'
        ]
      ];

      var i = 0;
      var l = fnMap.length;
      var ret = {};

      for (; i < l; i++) {
        val = fnMap[i];
        if (val && val[1] in document) {
          for (i = 0, valLength = val.length; i < valLength; i++) {
            ret[fnMap[0][i]] = val[i];
          }
          return ret;
        }
      }

      return false;
    })();

    var screenfull = {
      request: function (elem) {
        var request = fn.requestFullscreen;

        elem = elem || document.documentElement;

        // Work around Safari 5.1 bug: reports support for
        // keyboard in fullscreen even though it doesn't.
        // Browser sniffing, since the alternative with
        // setTimeout is even worse.
        if (/5\.1[\.\d]* Safari/.test(navigator.userAgent)) {
          elem[request]();
        } else {
          elem[request](keyboardAllowed && Element.ALLOW_KEYBOARD_INPUT);
        }
      },
      exit: function () {
        document[fn.exitFullscreen]();
      },
      toggle: function (elem) {
        if (this.isFullscreen) {
          this.exit();
        } else {
          this.request(elem);
        }
      },
      raw: fn
    };

    if (!fn) {
      if (isCommonjs) {
        module.exports = false;
      } else {
        window.screenfull = false;
      }

      return;
    }

    Object.defineProperties(screenfull, {
      isFullscreen: {
        get: function () {
          return !!document[fn.fullscreenElement];
        }
      },
      element: {
        enumerable: true,
        get: function () {
          return document[fn.fullscreenElement];
        }
      },
      enabled: {
        enumerable: true,
        get: function () {
          // Coerce to boolean in case of old WebKit
          return !!document[fn.fullscreenEnabled];
        }
      }
    });

    if (isCommonjs) {
      module.exports = screenfull;
    } else {
      window.screenfull = screenfull;
    }
  })();

  (function(window) {
    var refresh = 1000*<%= params[:refresh] %>;
    var container = document.getElementById("evercam-container-img");
    var url = "<%= EVERCAM_MEDIA_API %>cameras/<%= params[:camera] %>/thumbnail?api_id=<%= current_user.api_id unless current_user.nil? %>&api_key=<%= current_user.api_key unless current_user.nil? %>";
    var live_view_timestamp = 0;
    if (!window.Evercam) {
      window.Evercam = {};
    }
    Evercam.Camera = {
      id: '<%= params[:camera] %>'
    }
    Evercam.websockets_url = '<%= EvercamDashboard::Application.config.websockets_url %>';

    function fullscreenImage() {
      $("#evercam-container-img").dblclick(function(){
        screenfull.toggle($(this)[0]);
      });

      if (screenfull.enabled)
        document.addEventListener(screenfull.raw.fullscreenchange, function(){
          if (screenfull.isFullscreen) {
            $("#evercam-container-img").css('width', 'auto');
          }
          else {
            $("#evercam-container-img").css('width', '100%')
          }
        });
    }

    function handleVisibilityChange() {
      if (document.hidden) {
        clearTimeout(window.ec_watcher);
        disconnectFromSocket();
      } else  {
        connectToSocket();
      }
    }

    function initSocket() {
      var api_id = '<%= if current_user.nil? then "" else current_user.api_id end %>';
      var api_key = '<%= if current_user.nil? then "" else current_user.api_key end %>';
      window.Evercam.socket = new Phoenix.Socket(Evercam.websockets_url, {params: {api_id: api_id, api_key: api_key, ip: "<%= request.ip %>", source: "private_widget"}});
      connectToSocket();
    };

    function connectToSocket() {
      var channel;
      Evercam.socket.connect();
      channel = Evercam.socket.channel("cameras:" + Evercam.Camera.id, {});
      channel.join();
      return channel.on('snapshot-taken', function(payload) {
        if (payload.timestamp >= live_view_timestamp) {
          live_view_timestamp = payload.timestamp;
          $('#evercam-container-img').attr('src', 'data:image/jpeg;base64,' + payload.image);
        }
      });
    };

    function disconnectFromSocket() {
      return Evercam.socket.disconnect();
    };

    <% if params[:rtmp] %>
      window.vjs_player = videojs('camera-video-player', {
        techOrder: ["flash", "html5"]
      });

      vjs_player.on('error', function() {
          fullscreenImage();
            $("#camera-video-player").html(
              '<img id="evercam-container-img"  style="width: 100%" src="<%= EVERCAM_MEDIA_API %>cameras/<%= params[:camera] %>/thumbnail?api_id=<%= current_user.api_id unless current_user.nil? %>&api_key=<%= current_user.api_key unless current_user.nil? %>" />'
            );
            window.ec_vis_handler = handleVisibilityChange;
            document.addEventListener(
              "visibilitychange", handleVisibilityChange, false
            );
            initSocket()
      });
      var count = 0;
      var clear_timeout_videojs;

      clear_timeout_videojs = setTimeout(function() {
        switch_to_jpeg();
      }, 3000);

      function switch_to_jpeg() {
        if (count < 5 && (window.vjs_player.readyState() == undefined || window.vjs_player.readyState() <= 0)) {
            count = count + 1;
            setTimeout(function() {
              switch_to_jpeg();
            }, 3000);
        }
        else if (count >= 5 && (window.vjs_player.readyState() == undefined || window.vjs_player.readyState() <= 0)) {
            fullscreenImage();
            $("#camera-video-player").html(
              '<img id="evercam-container-img"  style="width: 100%" src="<%= EVERCAM_MEDIA_API %>cameras/<%= params[:camera] %>/thumbnail?api_id=<%= current_user.api_id unless current_user.nil? %>&api_key=<%= current_user.api_key unless current_user.nil? %>" />'
            );
            window.ec_vis_handler = handleVisibilityChange;
            document.addEventListener(
              "visibilitychange", handleVisibilityChange, false
            );
            initSocket()
        }
      };
    <% else %>
      fullscreenImage();
      window.ec_vis_handler = handleVisibilityChange;
      document.addEventListener("visibilitychange", handleVisibilityChange, false);
      initSocket()
    <% end %>

  }(window));
</script>
<% end %>
</body>
</html>
