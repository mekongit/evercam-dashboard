<%=raw render file: '/lib/assets/javascripts/phoenix.js' %>

(function(window) {

  "use strict";
// Localize jQuery variable
  var jQuery,
    container,
    refresh = 1000*<%= params[:refresh] %>,
    live_view_timestamp = 0,
    camera_id = '<%= params[:camera] %>',
    request_ip = '<%= request.ip %>',
    denied = false,
    priv = <%= !@camera['is_public'] %>,
    offline_camera = <%= @camera['status'] == "online" ? false : true %>;

  if (!window.Evercam) {
    window.Evercam = {};
  }
  Evercam.Camera = {
    id: '<%= params[:camera] %>'
  }
  Evercam.websockets_url = '<%= EvercamDashboard::Application.config.websockets_url %>';

  if (request_ip !== "217.112.145.202" && camera_id === "central-bank-fusion") {
    denied = true;
  }

  function handleVisibilityChange() {
    if (document.hidden) {
      clearTimeout(window.ec_watcher);
      disconnectFromSocket();
    } else  {
      connectToSocket();
    }
  }

  function initSocket() {
    window.Evercam.socket = new Phoenix.Socket(Evercam.websockets_url, {params: {ip: request_ip, source: "public_widget"}});
    connectToSocket();
  };

  function connectToSocket() {
    var channel;
    Evercam.socket.connect();
    var image_source = jQuery('<%= preview(@camera, true) %>');
    channel = Evercam.socket.channel("cameras:<%= params[:camera]%>", {});
    channel.join();
    if (offline_camera == false) {
      return channel.on('snapshot-taken', function(payload) {
        if (payload.timestamp >= live_view_timestamp) {
          live_view_timestamp = payload.timestamp;
          jQuery(container.find("img")).attr('src', 'data:image/jpeg;base64,' + payload.image);
        }
      });
    }
    else {
      jQuery(container.find("img")).attr('src', image_source.attr('src'));
      var container_height = jQuery(container.find("img")).height();
      var container_width = jQuery(container.find("img")).width();
      if (container_height === 0) {
        setTimeout((function() {
          return connectToSocket();
        }), 100);
      }
    }
  };

  function disconnectFromSocket() {
    return Evercam.socket.disconnect();
  };

  /******** Our main function ********/
  function main() {
    jQuery(document).ready(function($) {
      <% port = @camera.deep_fetch('external', 'rtsp', 'port') {} %>
      var rtmp_stream = "<%= @camera.deep_fetch('proxy_url', 'rtmp') {} if @camera['external'].blank? || port.present? %>";
      var hls_stream = "<%= @camera.deep_fetch('proxy_url', 'hls') {} if @camera['external'].blank? || port.present? %>";
      var query_string = "";
      rtmp_stream = rtmp_stream + "&requester=" + request_ip

      if (rtmp_stream) {
        query_string = "&rtmp=" + rtmp_stream;
        if (hls_stream) {
          query_string += "&hls=" + hls_stream;
        }
      }
      var window_height = $(window).height();
      /******* Load HTML *******/
      var na = navigator.userAgent;
      var is_android = (na.indexOf('Android ') > -1 && (na.indexOf('Chrome') > -1))
      var is_ios = (na.indexOf('Safari') != -1 && na.indexOf('Chrome') == -1 && na.match(/^(iPad|iPod|iPhone)$/))
      var mobile = /Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(na)
      var hasFlash = false;
      try {
        var flash = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
        if (flash) {
          hasFlash = true;
        }
      }
      catch (e) {
        if (navigator.mimeTypes
            && navigator.mimeTypes['application/x-shockwave-flash'] != undefined
            && navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
          hasFlash = true;
        }
      }
      container = $('#ec-container-<%= params[:camera]%>');
      container.css({"position":"relative","padding-top":"56.2%"});
      if (container.length == 0) {
        container = $('#ec-container');
      }

      if (priv || denied == true) {
        container.html('<iframe id="ec-frame" allowFullScreen style="width:100%;height: 100%;top: 0;left: 0;position:absolute;" src="<%= request.base_url %>/live.view.private.widget?camera=<%= params[:camera] %>&private=true&refresh=<%= params[:refresh] %>&api_id=<%= params[:api_id] %>&api_key=<%= params[:api_key] %>'+query_string+'" frameborder="0" scrolling="no"/>');
        $('#ec-frame').load(function() {
        });
      } else {
        if (rtmp_stream) {
          if ((mobile) && !(is_android) && !(is_ios)) {
            container.html("<img style='width: 100%; height: auto; margin: 0; padding: 0; float: left; border: none;'/>");
            initSocket();
            window.ec_vis_handler = handleVisibilityChange;
            document.addEventListener("visibilitychange", handleVisibilityChange, false);
          }
          else {
            container.html('<iframe id="ec-frame" allowFullScreen style="width:100%;height: 100%;top: 0;left: 0;position:absolute;" src="<%= request.base_url %>/live.view.private.widget?camera=<%= params[:camera] %>&refresh=<%= params[:refresh] %>&api_id=<%= params[:api_id] %>&api_key=<%= params[:api_key] %>'+query_string+'" frameborder="0" scrolling="no"/>');
            var container_height = jQuery("#ec-frame").height();
            var container_width = jQuery("#ec-frame").width();
            if (container_height === 0) {
              setTimeout((function() {
                return connectToSocket();
              }), 100);
            }
          }
        } else {
          container.html("<img style='width: 100%; height: auto; margin: 0; padding: 0; float: left; border: none;'/>");
          initSocket();
          window.ec_vis_handler = handleVisibilityChange;
          document.addEventListener("visibilitychange", handleVisibilityChange, false);
        }
      }
      fullscreenImage($,container.attr("id"));
    });
  }

  function fullscreenImage($,id) {
    $("#"+id+" img").dblclick(function(){
      screenfull.toggle($(this)[0]);
    });

    if (screenfull.enabled)
      document.addEventListener(screenfull.raw.fullscreenchange, function(){
        if (screenfull.isFullscreen) {
          $("#"+id+" img").css('width', 'auto')
        }
        else {
          $("#"+id+" img").css('width', '100%')
        }
      });
  }

  /******** Add videojs *****************/
  function addVideojsReffrences() {
    var link_tag = document.createElement('link');
    link_tag.setAttribute("rel","stylesheet");
    link_tag.setAttribute("href", "http://vjs.zencdn.net/7.3.0/video-js.min.css");
    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(link_tag);
    var videojs_tag = document.createElement('script');
    videojs_tag.setAttribute("type","text/javascript");
    videojs_tag.setAttribute("src", "http://vjs.zencdn.net/7.3.0/video.min.js");
    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(videojs_tag);

    var videojs_contribe_hls_tag = document.createElement('script');
    videojs_contribe_hls_tag.setAttribute("type","text/javascript");
    videojs_contribe_hls_tag.setAttribute("src", "https://cdnjs.cloudflare.com/ajax/libs/videojs-contrib-hls/5.15.0/videojs-contrib-hls.min.js");
    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(videojs_contribe_hls_tag);
  }

  /******** Called once jQuery has loaded ******/
  function scriptLoadHandler() {
    // Restore $ and window.jQuery to their previous values and store the
    // new jQuery in our local jQuery variable
    jQuery = window.jQuery.noConflict(true);
    // Call our main function
    main();
  }

  /******** Load jQuery if not present *********/
  if (window.jQuery === undefined || window.jQuery.fn.jquery !== '2.1.3') {
    var script_tag = document.createElement('script');
    script_tag.setAttribute("type","text/javascript");
    script_tag.setAttribute("src",
      "https://code.jquery.com/jquery-1.12.0.min.js");
    if (script_tag.readyState) {
      script_tag.onreadystatechange = function () { // For old versions of IE
        if (this.readyState === 'complete' || this.readyState === 'loaded') {
          scriptLoadHandler();
        }
      };
    } else {
      script_tag.onload = scriptLoadHandler;
    }
    // Try to find the head, otherwise default to the documentElement
    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(script_tag);
    if(typeof(videojs) == "undefined" ) {
      //addVideojsReffrences();
    }
  } else {
    // The jQuery version on the window is the one we want to use
    jQuery = window.jQuery;
    main();
  }

}(window));

(function () {
  'use strict';

  var isCommonjs = typeof module !== 'undefined' && module.exports;
  var keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;

  var fn = (function () {
    var val;
    var valLength;

    var fnMap = [
      [
        'requestFullscreen',
        'exitFullscreen',
        'fullscreenElement',
        'fullscreenEnabled',
        'fullscreenchange',
        'fullscreenerror'
      ],
      // new WebKit
      [
        'webkitRequestFullscreen',
        'webkitExitFullscreen',
        'webkitFullscreenElement',
        'webkitFullscreenEnabled',
        'webkitfullscreenchange',
        'webkitfullscreenerror'

      ],
      // old WebKit (Safari 5.1)
      [
        'webkitRequestFullScreen',
        'webkitCancelFullScreen',
        'webkitCurrentFullScreenElement',
        'webkitCancelFullScreen',
        'webkitfullscreenchange',
        'webkitfullscreenerror'

      ],
      [
        'mozRequestFullScreen',
        'mozCancelFullScreen',
        'mozFullScreenElement',
        'mozFullScreenEnabled',
        'mozfullscreenchange',
        'mozfullscreenerror'
      ],
      [
        'msRequestFullscreen',
        'msExitFullscreen',
        'msFullscreenElement',
        'msFullscreenEnabled',
        'MSFullscreenChange',
        'MSFullscreenError'
      ]
    ];

    var i = 0;
    var l = fnMap.length;
    var ret = {};

    for (; i < l; i++) {
      val = fnMap[i];
      if (val && val[1] in document) {
        for (i = 0, valLength = val.length; i < valLength; i++) {
          ret[fnMap[0][i]] = val[i];
        }
        return ret;
      }
    }

    return false;
  })();

  var screenfull = {
    request: function (elem) {
      var request = fn.requestFullscreen;

      elem = elem || document.documentElement;

      // Work around Safari 5.1 bug: reports support for
      // keyboard in fullscreen even though it doesn't.
      // Browser sniffing, since the alternative with
      // setTimeout is even worse.
      if (/5\.1[\.\d]* Safari/.test(navigator.userAgent)) {
        elem[request]();
      } else {
        elem[request](keyboardAllowed && Element.ALLOW_KEYBOARD_INPUT);
      }
    },
    exit: function () {
      document[fn.exitFullscreen]();
    },
    toggle: function (elem) {
      if (this.isFullscreen) {
        this.exit();
      } else {
        this.request(elem);
      }
    },
    raw: fn
  };

  if (!fn) {
    if (isCommonjs) {
      module.exports = false;
    } else {
      window.screenfull = false;
    }

    return;
  }

  Object.defineProperties(screenfull, {
    isFullscreen: {
      get: function () {
        return !!document[fn.fullscreenElement];
      }
    },
    element: {
      enumerable: true,
      get: function () {
        return document[fn.fullscreenElement];
      }
    },
    enabled: {
      enumerable: true,
      get: function () {
        // Coerce to boolean in case of old WebKit
        return !!document[fn.fullscreenEnabled];
      }
    }
  });

  if (isCommonjs) {
    module.exports = screenfull;
  } else {
    window.screenfull = screenfull;
  }
})();
